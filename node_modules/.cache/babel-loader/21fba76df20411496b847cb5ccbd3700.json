{"remainingRequest":"/home/four/daoconsensus/node_modules/babel-loader/lib/index.js!/home/four/daoconsensus/node_modules/eslint-loader/index.js??ref--13-0!/home/four/daoconsensus/src/store/tron.js","dependencies":[{"path":"/home/four/daoconsensus/src/store/tron.js","mtime":1616586317000},{"path":"/home/four/daoconsensus/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/four/daoconsensus/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/four/daoconsensus/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/four/daoconsensus/src/store/tron.js"],"names":["firebase","TronWeb","state","mutations","actions","fetchCurrency","dispatch","decimals","fullNode","solidityNode","eventServer","uid","database","ref","once","info","val","tronWeb","pk","contract","at","token","balanceOf","address","call","balance","trx","getBalance","balanceTRX","console","log","contractData","getFunds","funds","getNetworkUnilevel","networkUnilevel","f1a","fromHex","f2a","f3a","f4a","lev1","lev2","lev3","getters"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app'\r\nimport TronWeb from 'tronweb'\r\nexport default {\r\n    state: {\r\n\r\n    },\r\n    mutations: {\r\n\r\n    },\r\n    actions: {\r\n        async fetchCurrency({ dispatch }) {\r\n            const decimals = 1000000\r\n            const fullNode = \"https://api.shasta.trongrid.io\"\r\n            const solidityNode = \"https://api.shasta.trongrid.io\"\r\n            const eventServer = \"https://api.shasta.trongrid.io\"\r\n\r\n            try {\r\n                const uid = await dispatch('getUid')\r\n                const info = (await firebase.database().ref(`/users/${uid}/info`).once('value')).val()\r\n                if (info) {\r\n                    const tronWeb = new TronWeb(fullNode, solidityNode, eventServer, info.pk)\r\n                    const token = await tronWeb.contract().at(\"TYjsaL4BisZ3VMKGMti4ySvhBUYAyC14Tc\")\r\n                    const balance = await token.balanceOf(info.address).call() / decimals\r\n                    const balanceTRX = await tronWeb.trx.getBalance(info.address) / 1000000\r\n\r\n                    return { info, balanceTRX, balance }\r\n                } else {\r\n                    return null\r\n                }\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n        },\r\n        async contractData({ dispatch }) {\r\n            //const decimals = 1000000\r\n            const fullNode = \"https://api.shasta.trongrid.io\"\r\n            const solidityNode = \"https://api.shasta.trongrid.io\"\r\n            const eventServer = \"https://api.shasta.trongrid.io\"\r\n\r\n            try {\r\n                const uid = await dispatch('getUid')\r\n                const info = (await firebase.database().ref(`/users/${uid}/info`).once('value')).val()\r\n                if (info) {\r\n                    const tronWeb = new TronWeb(fullNode, solidityNode, eventServer, info.pk)\r\n                    const contract = await tronWeb.contract().at(\"TT8e5gYVwdcZQZfgMB76ZXviab91Yv1u7b\")\r\n                    const funds = await contract.getFunds().call()\r\n                    const networkUnilevel = await contract.getNetworkUnilevel().call()\r\n\r\n                    funds.f1a = tronWeb.address.fromHex(funds.f1a)\r\n                    funds.f2a = tronWeb.address.fromHex(funds.f2a)\r\n                    funds.f3a = tronWeb.address.fromHex(funds.f3a)\r\n                    funds.f4a = tronWeb.address.fromHex(funds.f4a)\r\n\r\n                    networkUnilevel.lev1 = tronWeb.address.fromHex(networkUnilevel.lev1) == 'T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb' ? null : tronWeb.address.fromHex(networkUnilevel.lev1)\r\n                    networkUnilevel.lev2 = tronWeb.address.fromHex(networkUnilevel.lev2) == 'T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb' ? null : tronWeb.address.fromHex(networkUnilevel.lev2)\r\n                    networkUnilevel.lev3 = tronWeb.address.fromHex(networkUnilevel.lev3) == 'T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb' ? null : tronWeb.address.fromHex(networkUnilevel.lev3)\r\n\r\n                    return { funds, networkUnilevel }\r\n                } else {\r\n                    return null\r\n                }\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n        }\r\n    },\r\n    getters: {\r\n\r\n    }\r\n}"]}]}